import xml.etree.ElementTree as ET
import numpy as np
import pandas as pd
import os
import re
import matplotlib.pyplot as plt
from ddstable.ddstable import get_ddstable

# === CONFIGURATION ===
target_name = "זיידנברג נצר יעקב"
folder_path = "/home/ben/Desktop/Final_Project/bridge_data"
plot_dir = "/home/ben/Desktop/Final_Project/plots"
os.makedirs(plot_dir, exist_ok=True)

# === UTILITIES ===
def normalize_hebrew(s):
    if not s:
        return ""
    s = re.sub(r"[^א-ת\s]", "", s)
    s = re.sub(r"\s+", " ", s)
    return s.strip()

def parse_contract(contract_str):
    if not contract_str:
        return None
    cs = contract_str.strip()
    m = re.match(r"^(\d)([SHDCN])(X{0,2})([NESW])([=+-]\d+|=)?$", cs)
    if not m:
        return None
    level = int(m.group(1))
    strain = m.group(2)
    declarer = m.group(4)
    result_str = m.group(5) or "="
    tricks_bid = level + 6
    tricks_made = tricks_bid
    if result_str.startswith("+"):
        tricks_made += int(result_str[1:])
    elif result_str.startswith("-"):
        tricks_made -= int(result_str[1:])
    return {
        "contract_level": level,
        "strain": strain,
        "declarer": declarer,
        "tricks_bid": tricks_bid,
        "tricks_made": tricks_made,
        "over_under": tricks_made - tricks_bid,
        "success": tricks_made >= tricks_bid,
        "raw": contract_str
    }

def get_declarer_side(declarer):
    if not declarer:
        return None
    return "NS" if declarer in ("N", "S") else "EW"

def parse_deal(deal_text):
    """Parse the deal from the XML with detailed debugging"""
    if not deal_text or not deal_text.strip():
        print("DEAL TEXT DEBUG: Empty or None deal text")
        return None
    
    # Debug: print the full deal text
    print(f"DEAL TEXT DEBUG: Full text = '{deal_text}'")
    
    # Try to extract hands - be more flexible with separators and format
    # Looking for patterns like "J863.J9742.97.Q9" or similar, separated by spaces or newlines
    hand_pattern = r'([AKQTJ9x8765432]{1,13}(?:\.[AKQTJ9x8765432]{1,13}){3})'
    
    # Split into lines and try to find hands
    lines = deal_text.split('\n')
    hands = []
    for line in lines:
        line = line.strip()
        if line:
            matches = re.findall(hand_pattern, line)
            hands.extend(matches)
    
    if len(hands) >= 4:
        # Take the first 4 valid hands
        pbn = f"N:{hands[0]} E:{hands[1]} S:{hands[2]} W:{hands[3]}"
        print(f"PBN SUCCESS: {pbn[:100]}...")
        return pbn
    else:
        print(f"PBN FAIL: Found {len(hands)} hands, need 4. Sample matches: {hands}")
        return None

def rotate_pbn_to_north(pbn_text):
    """Ensure PBN always starts with North"""
    if not pbn_text:
        return pbn_text
    
    if pbn_text.startswith("N:"):
        return pbn_text
    
    parts = pbn_text.split()
    if len(parts) != 5:
        return pbn_text
    
    seat_order = parts[0][0]
    hands = parts[1:]
    
    seat_map = {'N': 0, 'E': 1, 'S': 2, 'W': 3}
    current_idx = seat_map.get(seat_order, 0)
    
    rotated_hands = hands[-current_idx:] + hands[:-current_idx]
    return f"N:{rotated_hands[0]} E:{rotated_hands[1]} S:{rotated_hands[2]} W:{rotated_hands[3]}"

def get_dds_tricks(deal_pbn, declarer, strain):
    """Get double dummy tricks with better error handling and debugging"""
    if not deal_pbn or not declarer or not strain:
        return None
    
    try:
        pbn = rotate_pbn_to_north(deal_pbn)
        
        if 'N:' in pbn and len(re.findall(r'\.', pbn)) == 12:
            dds_result = get_ddstable(pbn.encode("utf-8"))
            strain_key = "NT" if strain == "N" else strain.upper()
            
            if declarer in dds_result and strain_key in dds_result[declarer]:
                tricks = dds_result[declarer][strain_key]
                print(f"DDS SUCCESS: {declarer} {strain} = {tricks} tricks")
                return tricks
            else:
                print(f"DDS FAIL: No result for {declarer} {strain_key}")
                return None
        else:
            print(f"DDS FAIL: Invalid PBN format: {pbn[:50]}...")
            return None
    except Exception as e:
        print(f"DDS ERROR: {e}")
        return None

def get_optimal_level(deal_pbn, side):
    """Get optimal contract level for the side"""
    if not deal_pbn or not side:
        return None
    
    try:
        pbn = rotate_pbn_to_north(deal_pbn)
        dds_result = get_ddstable(pbn.encode("utf-8"))
        declarers = ['N', 'S'] if side == "NS" else ['E', 'W']
        strains = ['NT', 'S', 'H', 'D', 'C']
        
        max_tricks = 0
        for d in declarers:
            for s in strains:
                if d in dds_result and s in dds_result[d]:
                    max_tricks = max(max_tricks, dds_result[d][s])
        
        optimal_level = max(0, max_tricks - 6)
        return optimal_level
    except Exception as e:
        return None

# === DATA EXTRACTION ===
all_results = []
board_records = []
board_records_field = []
pbn_count = 0
dds_success_count = 0

target_name_norm = normalize_hebrew(target_name)

for filename in os.listdir(folder_path):
    if not filename.endswith(".xml"):
        continue
    filepath = os.path.join(folder_path, filename)
    try:
        tree = ET.parse(filepath)
        root = tree.getroot()
    except Exception as e:
        print(f"Error parsing {filename}: {e}")
        continue

    # Parse text for ranking to find target pair_id
    text = ET.tostring(root, encoding='unicode', method='text')
    lines = text.split('\n')
    target_pair_id = None
    target_score = np.nan
    
    for j in range(len(lines)):
        line = lines[j].strip()
        norm_line = normalize_hebrew(line)
        if target_name_norm in norm_line:
            for k in range(j-1, max(0, j-10), -1):
                prev = lines[k].strip()
                if re.match(r'^\d+$', prev):
                    target_pair_id = prev
                    for m in range(j, min(len(lines), j+10)):
                        percent_line = lines[m].strip()
                        if re.match(r'^\d+\.\d+$', percent_line):
                            try:
                                target_score = float(percent_line)
                                break
                            except:
                                pass
                    break
            if target_pair_id:
                all_results.append({"file": filename, "pair_id": target_pair_id, "score": target_score})
                print(f"Found target player {target_name} in {filename}, pair_id: {target_pair_id}, score: {target_score}")
                break

    # collect board-level field data
    b_id = 0
    for board in root.iter('board'):
        b_id += 1
        deal_elem = board.find('deal')
        deal_text = deal_elem.text if deal_elem is not None else None
        deal_pbn = parse_deal(deal_text) if deal_text else None
        
        if deal_pbn:
            pbn_count += 1
            if pbn_count <= 3:
                print(f"Board {b_id} PBN: {deal_pbn[:100]}...")
        
        for data in board.findall('data'):
            contract_str_all = data.attrib.get("C") or ""
            parsed_all = parse_contract(contract_str_all)
            declarer = parsed_all["declarer"] if parsed_all else None
            side = "NS" if data.attrib.get('N') or data.attrib.get('Nss') else "EW" if data.attrib.get('E') or data.attrib.get('Ews') else None
            if not side:
                continue
            declarer_side = get_declarer_side(declarer)
            is_defense = side != declarer_side if declarer_side else None
            
            field_record = {
                "file": filename,
                "board_id": str(b_id),
                "side": side,
                "contract_raw": contract_str_all,
                "declarer_side": declarer_side,
                "is_defense": is_defense,
                "deal_pbn": deal_pbn,
            }
            
            if parsed_all:
                field_record.update(parsed_all)
            
            if parsed_all and declarer and deal_pbn:
                dds_tricks = get_dds_tricks(deal_pbn, declarer, parsed_all["strain"])
                if dds_tricks is not None:
                    field_record["dds_tricks"] = dds_tricks
                    dds_success_count += 1
            
            board_records_field.append(field_record)

    # boards of this pair
    if target_pair_id:
        b_id = 0
        for board in root.iter('board'):
            b_id += 1
            deal_elem = board.find('deal')
            deal_text = deal_elem.text if deal_elem is not None else None
            deal_pbn = parse_deal(deal_text) if deal_text else None
            
            for data in board.findall('data'):
                if data.attrib.get('N') == target_pair_id or data.attrib.get('E') == target_pair_id:
                    side = "NS" if data.attrib.get('N') == target_pair_id else "EW"
                    player_pct = float(data.attrib.get("Nss" if side == "NS" else "Ews", 0))
                    contract_str = data.attrib.get("C") or ""
                    parsed = parse_contract(contract_str)
                    declarer = parsed["declarer"] if parsed else None
                    declarer_side = get_declarer_side(declarer)
                    is_defense = side != declarer_side if declarer_side else None
                    
                    player_record = {
                        "file": filename,
                        "board_id": str(b_id),
                        "pair_id": target_pair_id,
                        "side": side,
                        "player_pct": player_pct,
                        "contract_raw": contract_str,
                        "declarer_side": declarer_side,
                        "is_defense": is_defense,
                        "deal_pbn": deal_pbn,
                    }
                    
                    if parsed:
                        player_record.update(parsed)
                    
                    if parsed and declarer and deal_pbn:
                        dds_tricks = get_dds_tricks(deal_pbn, declarer, parsed["strain"])
                        if dds_tricks is not None:
                            player_record["dds_tricks"] = dds_tricks
                            dds_success_count += 1
                        if not is_defense:
                            optimal_level = get_optimal_level(deal_pbn, side)
                            if optimal_level is not None:
                                player_record["optimal_level"] = optimal_level
                    
                    board_records.append(player_record)

print(f"Total PBNs parsed: {pbn_count}")
print(f"Total DDS successes: {dds_success_count}")

# === DATAFRAMES ===
df_all = pd.DataFrame(all_results)
df_boards = pd.DataFrame(board_records)
df_boards_field = pd.DataFrame(board_records_field)

print(f"Found {len(df_all)} total results for player")
print(f"Found {len(df_boards)} board records for player")
print(f"Found {len(df_boards_field)} field board records")

# Debug DDS data - safe version
dds_count_player = 0
dds_count_field = 0
if 'dds_tricks' in df_boards.columns:
    dds_count_player = df_boards['dds_tricks'].notna().sum()
if 'dds_tricks' in df_boards_field.columns:
    dds_count_field = df_boards_field['dds_tricks'].notna().sum()

print(f"Player boards with DDS data: {dds_count_player}/{len(df_boards)}")
print(f"Field boards with DDS data: {dds_count_field}/{len(df_boards_field)}")

if dds_count_player > 0 and 'dds_tricks' in df_boards.columns:
    print(f"Sample player DDS values: {df_boards['dds_tricks'].dropna().head().tolist()}")

# === REPORT ===
report_lines = []
def print_and_record(s=""):
    print(s)
    report_lines.append(s)

def plot_comparison(categories, player_vals, field_vals, dds_vals, title, filename, ylabel=""):
    x = np.arange(len(categories))
    width = 0.25
    plt.figure(figsize=(10, 6))
    
    player_vals = [v if not np.isnan(v) else 0 for v in player_vals]
    field_vals = [v if not np.isnan(v) else 0 for v in field_vals]
    dds_vals = [v if not np.isnan(v) else 0 for v in dds_vals]
    
    bars1 = plt.bar(x - width, player_vals, width, label="Player", color='#2E86AB', alpha=0.8)
    bars2 = plt.bar(x, field_vals, width, label="Field", color='#A23B72', alpha=0.8)
    bars3 = plt.bar(x + width, dds_vals, width, label="DDS Optimal", color='#F18F01', alpha=0.8)
    
    plt.xticks(x, categories, rotation=45)
    plt.title(title, fontsize=14, fontweight='bold')
    plt.ylabel(ylabel)
    plt.legend()
    plt.grid(axis='y', alpha=0.3)
    
    for bars, vals in [(bars1, player_vals), (bars2, field_vals), (bars3, dds_vals)]:
        for bar, val in zip(bars, vals):
            height = bar.get_height()
            plt.text(bar.get_x() + bar.get_width()/2., height + 0.01,
                    f'{val:.2f}', ha='center', va='bottom', fontsize=9)
    
    path = os.path.join(plot_dir, filename)
    plt.tight_layout()
    plt.savefig(path, bbox_inches="tight", dpi=300)
    plt.close()
    return path

if df_all.empty:
    print(f"Couldn't find {target_name}")
else:
    player_declarer = df_boards[df_boards["is_defense"] == False].copy()
    player_defender = df_boards[df_boards["is_defense"] == True].copy()
    field_declarer = df_boards_field[df_boards_field["is_defense"] == False].copy()
    field_defender = df_boards_field[df_boards_field["is_defense"] == True].copy()
    
    print(f"Player declarer records: {len(player_declarer)}")
    print(f"Player defender records: {len(player_defender)}")
    print(f"Field declarer records: {len(field_declarer)}")
    print(f"Field defender records: {len(field_defender)}")

    print_and_record("\n--- Bidding Aggressiveness ---")
    avg_level_player = player_declarer["contract_level"].mean() if not player_declarer.empty and 'contract_level' in player_declarer.columns else np.nan
    avg_level_field = field_declarer["contract_level"].mean() if not field_declarer.empty and 'contract_level' in field_declarer.columns else np.nan
    avg_level_dds = player_declarer["optimal_level"].mean() if not player_declarer.empty and 'optimal_level' in player_declarer.columns else np.nan
    print_and_record(f"Average contract level: Player={avg_level_player:.2f}, Field={avg_level_field:.2f}, DDS={avg_level_dds:.2f}")
    path = plot_comparison(["Contract Level"], [avg_level_player], [avg_level_field], [avg_level_dds], "Bidding Aggressiveness", "bidding_aggressiveness.png", "Avg Level")
    report_lines.append(f'<img src="{path}" width="600">')

    print_and_record("\n--- Overbid vs Underbid (As Declarer Only) ---")
    if not player_declarer.empty and not field_declarer.empty and 'success' in player_declarer.columns:
        fail_rate_player = (player_declarer["success"] == False).mean() if 'success' in player_declarer.columns else 0
        make_rate_player = (player_declarer["success"] == True).mean() if 'success' in player_declarer.columns else 0
        fail_rate_field = (field_declarer["success"] == False).mean() if 'success' in field_declarer.columns else 0
        make_rate_field = (field_declarer["success"] == True).mean() if 'success' in field_declarer.columns else 0
        
        fail_rate_dds = 0
        make_rate_dds = 0
        if 'dds_tricks' in player_declarer.columns and 'tricks_bid' in player_declarer.columns:
            dds_data = player_declarer.dropna(subset=['dds_tricks', 'tricks_bid'])
            if not dds_data.empty:
                fail_rate_dds = (dds_data["dds_tricks"] < dds_data["tricks_bid"]).mean()
                make_rate_dds = (dds_data["dds_tricks"] >= dds_data["tricks_bid"]).mean()
                print_and_record(f"DDS calculation based on {len(dds_data)} valid deals")
        
        print_and_record(f"Contracts failed as declarer: Player={fail_rate_player:.2%}, Field={fail_rate_field:.2%}, DDS={fail_rate_dds:.2%}")
        print_and_record(f"Contracts made as declarer: Player={make_rate_player:.2%}, Field={make_rate_field:.2%}, DDS={make_rate_dds:.2%}")
        path = plot_comparison(["Failed", "Made"], [fail_rate_player, make_rate_player], [fail_rate_field, make_rate_field], [fail_rate_dds, make_rate_dds], "Overbid vs Underbid (As Declarer)", "overbid_underbid.png", "Rate")
        report_lines.append(f'<img src="{path}" width="600">')
    else:
        print_and_record("No declarer data available for comparison")

    print_and_record("\n--- Contract Level Success ---")
    if not player_declarer.empty and 'contract_level' in player_declarer.columns and 'success' in player_declarer.columns:
        success_by_level_player = player_declarer.groupby("contract_level")["success"].mean()
        success_by_level_field = field_declarer.groupby("contract_level")["success"].mean() if 'success' in field_declarer.columns else pd.Series()
        
        success_by_level_dds = {}
        if 'dds_tricks' in player_declarer.columns and 'tricks_bid' in player_declarer.columns:
            dds_data = player_declarer.dropna(subset=['dds_tricks', 'tricks_bid', 'contract_level'])
            for level in dds_data["contract_level"].unique():
                level_data = dds_data[dds_data["contract_level"] == level]
                if not level_data.empty:
                    success_by_level_dds[level] = (level_data["dds_tricks"] >= level_data["tricks_bid"]).mean()
        
        cats = sorted(list(set(success_by_level_player.index) | set(success_by_level_field.index)))
        player_vals = [success_by_level_player.get(l, 0) for l in cats]
        field_vals = [success_by_level_field.get(l, 0) for l in cats]
        dds_vals = [success_by_level_dds.get(l, 0) for l in cats]
        
        for i, lvl in enumerate(cats):
            print_and_record(f"Level {lvl}: Player={player_vals[i]:.2%}, Field={field_vals[i]:.2%}, DDS={dds_vals[i]:.2%}")
        
        path = plot_comparison([f"Lvl {int(l)}" for l in cats], player_vals, field_vals, dds_vals, "Success by Contract Level", "contract_level_success.png", "Success Rate")
        report_lines.append(f'<img src="{path}" width="600">')
    else:
        print_and_record("No contract level data available")

    print_and_record("\n--- Declarer vs Defender ---")
    decl_success_player = player_declarer["success"].mean() if not player_declarer.empty and 'success' in player_declarer.columns else 0
    decl_success_field = field_declarer["success"].mean() if not field_declarer.empty and 'success' in field_declarer.columns else 0
    
    decl_success_dds = 0
    if 'dds_tricks' in player_declarer.columns and 'tricks_bid' in player_declarer.columns:
        dds_decl_data = player_declarer.dropna(subset=['dds_tricks', 'tricks_bid'])
        if not dds_decl_data.empty:
            decl_success_dds = (dds_decl_data["dds_tricks"] >= dds_decl_data["tricks_bid"]).mean()

    defe_success_player = (player_defender["over_under"] < 0).mean() if not player_defender.empty and 'over_under' in player_defender.columns else 0
    defe_success_field = (field_defender["over_under"] < 0).mean() if not field_defender.empty and 'over_under' in field_defender.columns else 0
    
    defe_success_dds = 0
    if 'dds_tricks' in player_defender.columns and 'tricks_bid' in player_defender.columns:
        dds_def_data = player_defender.dropna(subset=['dds_tricks', 'tricks_bid'])
        if not dds_def_data.empty:
            defe_success_dds = (dds_def_data["dds_tricks"] < dds_def_data["tricks_bid"]).mean()

    print_and_record(f"Contracts Made as Declarer: Player={decl_success_player:.2%}, Field={decl_success_field:.2%}, DDS={decl_success_dds:.2%}")
    print_and_record(f"Contracts Set as Defender: Player={defe_success_player:.2%}, Field={defe_success_field:.2%}, DDS={defe_success_dds:.2%}")
    path = plot_comparison(["Declarer (Made)", "Defender (Set)"], [decl_success_player, defe_success_player], [decl_success_field, defe_success_field], [decl_success_dds, defe_success_dds], "Declarer vs Defender", "declarer_vs_defender.png", "Success Rate")
    report_lines.append(f'<img src="{path}" width="600">')

    print_and_record("\n--- Overtrick Efficiency ---")
    player_over_freq = (player_declarer["over_under"] > 0).mean() if not player_declarer.empty and 'over_under' in player_declarer.columns else 0
    field_over_freq = (field_declarer["over_under"] > 0).mean() if not field_declarer.empty and 'over_under' in field_declarer.columns else 0
    
    dds_over_freq = 0
    if 'dds_tricks' in player_declarer.columns and 'tricks_bid' in player_declarer.columns:
        dds_over_data = player_declarer.dropna(subset=['dds_tricks', 'tricks_bid'])
        if not dds_over_data.empty:
            dds_over_freq = (dds_over_data["dds_tricks"] > dds_over_data["tricks_bid"]).mean()
    
    print_and_record(f"Overtrick frequency: Player={player_over_freq:.2%}, Field={field_over_freq:.2%}, DDS={dds_over_freq:.2%}")
    path = plot_comparison(["Overtricks"], [player_over_freq], [field_over_freq], [dds_over_freq], "Overtrick Efficiency", "overtrick_efficiency.png", "Frequency")
    report_lines.append(f'<img src="{path}" width="600">')

# === OUTPUT HTML ===
safe_name = re.sub(r"[^א-תA-Za-z0-9_\- ]", "", target_name)
out_fname = f"/home/ben/Desktop/Final_Project/player_stats_{safe_name.replace(' ', '_')}.html"
html_content = f"""<!DOCTYPE html>
<html><head><meta charset='utf-8'><title>Stats for Player {target_name}</title>
<style>
body {{ font-family: Arial, sans-serif; margin: 20px; background-color: #f8f9fa; }}
h1 {{ color: #2c3e50; text-align: center; margin-bottom: 30px; }}
h2 {{ color: #34495e; border-bottom: 2px solid #ecf0f1; padding-bottom: 10px; margin-top: 30px; }}
p {{ line-height: 1.6; margin: 10px 0; }}
img {{ display: block; margin: 20px auto; border: 1px solid #ddd; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }}
.debug {{ background-color: #fff3cd; padding: 10px; border-radius: 4px; margin: 10px 0; font-size: 0.9em; }}
</style>
</head><body><h1>Bridge Performance Analysis for {target_name}</h1>"""

html_content += f"""
<div class="debug">
    <strong>Debug Info:</strong> {len(df_boards)} player boards, {dds_count_player} with DDS data<br>
    Field: {len(df_boards_field)} boards, {dds_count_field} with DDS data<br>
    PBNs parsed: {pbn_count}, DDS successes: {dds_success_count}
</div>
"""

for line in report_lines:
    if line.strip().startswith("---"):
        html_content += f"<h2>{line.strip('- ').strip()}</h2>"
    elif line.strip().startswith("<img"):
        html_content += line
    else:
        html_content += f"<p>{line}</p>"

html_content += "</body></html>"

with open(out_fname, "w", encoding="utf-8") as f:
    f.write(html_content)

print(f"Report written to {out_fname}")
